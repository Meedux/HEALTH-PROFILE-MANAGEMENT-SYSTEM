@page "/bhw/resident/{ID:int}"
@layout BHWLayout
@inject Context context
@inject NavigationManager NavigationManager

<div class="container" style="margin-top: 86px;">
    <h1 class="text-center">Resident Details</h1>
</div>
<div class="container">
    <div class="row">
        <div class="col text-center"><img class="rounded-circle img-fluid" width="300" height="80" src="https://cdn-icons-png.flaticon.com/512/1253/1253756.png"></div>
        <div class="col">
            <div class="row">
                <div class="col d-flex justify-content-end mb-3">
                    @if(isEdit){
                        <button class="btn btn-success mr-2" @onclick="UpdateInformation">Update Information</button>
                        <a class="btn btn-warning" href="/bhw/resident/@ID">Exit</a>
                    }
                    else
                    {
                        <Button Color="Color.Primary" Class="mr-3" Clicked="@ShowMedicineModal">Medicine</Button>
                        <a class="btn btn-primary" href="/bhw/resident/@ID?isEdit=true">Edit</a>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col">
                    @if (age >= 60)
                    {
                        <p style="font-size: 26px;" class="d-flex align-items-center">
                            <strong>Senior Citizen ID #</strong>:
                            @if (isEdit)
                            {
                                <input type="number" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_id_no" />
                            }
                            else
                            {
                                @id_no
                            }
                        </p>
                    }
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        <strong>First Name</strong>:
                        @if(isEdit){
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_firstName" />
                        }
                        else{
                             @firstName
                           }
                    </p>
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        <strong>Last Name</strong>:
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_lastName" />
                        }
                        else
                        {
                            @lastName
                        }
                    </p>
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        <strong>Middle Name</strong>: 
                         @if(isEdit){
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_middleName" />
                        }
                        else{
                             @middleName
                           }    
                    </p>
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        <strong>Age</strong>: 
                        @if(isEdit){
                            <input type="number" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_age" />
                        }
                        else{
                             @age
                        }    
                    </p>

                   
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        <strong>Date of Birth</strong>:
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_dob" />
                        }
                        else
                        {
                            @dob
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="margin-top: 20px;">
        <div class="col">
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Gender:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_gender" />
                        }
                        else
                        {
                            @gender
                        }
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Civil Status:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_civil_status" />
                        }
                        else
                        {
                            @civil_status
                        }
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Religion:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_religion" />
                        }
                        else
                        {
                            @religion
                        }
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Occupation:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_occupation" />
                        }
                        else
                        {
                            @occupation
                        }
                     </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Highest Educational Attainment:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_ed_attain" />
                        }
                        else
                        {
                            @ed_attain
                        }
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Household Number:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        #
                        @if (isEdit)
                        {
                            <input type="number" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_household_number" />
                        }
                        else
                        {
                            @household_number
                        }
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Purok:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <Select TValue="string" @bind-Value="@purok" Placeholder="Select Purok...." Class="form-control" @onchange="ChangePurok">
                                <SelectItem Value="String.Empty">Select Purok Where the Resident Currently Resides</SelectItem>
                                @foreach (string pur in purokList)
                                {
                                    <SelectItem Value="@pur">@pur</SelectItem>
                                }
                            </Select>
                        }
                        else
                        {
                            @purok
                        }
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p style="font-size: 26px;font-weight: bold;">Status:</p>
                </div>
                <div class="col">
                    <p style="font-size: 26px;" class="d-flex align-items-center">
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-80 form-control" @bind="edited_status_type" />
                        }
                        else
                        {
                            @status_type
                        }
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="container" style="margin-bottom: 36px;margin-top: 34px;">
    <h1 class="text-center">User Health Details</h1>
</div>
<div class="container" style="margin-bottom: 52px;">
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Status Type</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        Type of Illness(If Any)
                        <br />
                        
                    </td>
                    <td>
                        @if (isEdit)
                        {
                            @* <Select TValue="int" @bind-Value="@edited_illness_typeID" Placeholder="Select illness..." Class="form-control" @onchange="HandleChange">
                                <SelectItem Value="-1">Update Resident's Illness'</SelectItem>
                                <SelectItem Value="0">None</SelectItem>
                                @foreach (var illness in Illnesses)
                                {
                                    <SelectItem Value="@illness.ID">@illness.IllnessName</SelectItem>
                                }
                            </Select> *@
                            <button @onclick="AddInput" type="button" class="btn btn-success mb-3">Add Illness</button>
                            @for (int i = 0; i < illnessesID.Count; i++)
                            {
                                int currentIndex = i;
                                if (currentIndex < illnessesID.Count)
                                {
                                    <Select TValue="int" Placeholder="Select illness..." Class="form-control mb-3" @onchange="e => HandleChange(e, currentIndex)">
                                        <SelectItem Value="illnessesID[currentIndex]">Current Illness: @context.GetIllnessNameByID(illnessesID[currentIndex])</SelectItem>
                                        
                                        @foreach (var illness in Illnesses)
                                        {
                                            <SelectItem Value="@illness.ID">@illness.IllnessName</SelectItem>
                                        }
                                        <SelectItem Value="0">None</SelectItem>
                                    </Select>
                                }
                                else
                                {
                                    Console.WriteLine("Index out of range.");
                                }
                                
                            }
                        }
                        else
                        {
                            @foreach(int illnessID in illnessesID)
                            {
                                <p>@context.GetIllnessNameByID(illnessID)</p>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>Weight</td>
                    <td>
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_weight" />
                        }
                        else
                        {
                            @weight
                        }
                    </td>
                </tr>
                <tr>
                    <td>Height</td>
                    <td>
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_height" />
                        }
                        else
                        {
                            @height
                        }
                    </td>
                </tr>
                <tr>
                    <td>Temperature</td>
                    <td>
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_temperature" />
                        }
                        else
                        {
                            @temperature
                        }
                    </td>
                </tr>
                <tr>
                    <td>Blood Pressure</td>
                    <td>
                        @if (isEdit)
                        {
                            <input type="text" style="margin-left: 15px;" class="w-50 form-control" @bind="edited_bloodPressure" />
                        }
                        else
                        {
                            @bloodPressure
                        }
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<Modal @ref="@MedicineForm">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>
                Medicine
            </ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>
                    Medicine
                </FieldLabel>
                <Select TValue="int" @bind-SelectedValue="medicineId" @onchange="GetMedicineID" Class="form-control">
                    <SelectItem value="@none">None</SelectItem>
                    @foreach(ResidentMedicineModel medicine in medicines)
                    {
                        <SelectItem value="@medicine.ID">@medicine.MedicineName</SelectItem>
                    }
                </Select>
            </Field>

            @if(medicineId != 0)
            {
                <Field>
                    <FieldLabel>
                        Quantity
                    </FieldLabel>
                    <NumericEdit TValue="int" @bind-Value="@quantity"/>
                </Field>   
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideMedicineModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@AddMedicineReceipt" Disabled="(medicineId != 0 && quantity != 0) ? false : true">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public int ID { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool isEdit { get; set; } = true;

    String firstName        {get; set;} = "";
    String middleName       {get; set;} = "";
    String lastName         {get; set;} = "";
    String suffix           {get; set;} = "";
    String dob { get; set; } = "";
    int age { get; set; } = 0;
    String gender           {get; set;} = "";
    String civil_status     {get; set;} = "";
    String religion         {get; set;} = "";
    String occupation       {get; set;} = "";
    String fathers_name     {get; set;} = "";
    String mothers_name     {get; set;} = "";
    String head             {get; set;} = "";
    int? num_of_fam         {get; set;}
    String ed_attain        {get; set;} = "";
    int? household_number   {get; set;}
    String purok            {get; set;} = "";
    String status_type      {get; set;} = "";
    string illness_type     {get; set;} = "";
    int illness_typeID { get; set; }
    String weight           {get; set;} = "";
    String height           {get; set;} = "";
    String temperature      {get; set;} = "";
    String bloodPressure    {get; set;} = "";
    int id_no { get; set; } = 0;

    string[] purokList = { "1A", "1B", "2", "3", "4", "5", "6", "7"};
    String edited_firstName { get; set; } = "";
    String edited_middleName { get; set; } = "";
    String edited_lastName { get; set; } = "";
    String edited_suffix { get; set; } = "";
    String edited_dob { get; set; } = "";
    int edited_age { get; set; }
    String edited_gender { get; set; } = "";
    String edited_civil_status { get; set; } = "";
    String edited_religion { get; set; } = "";
    String edited_occupation { get; set; } = "";
    String edited_fathers_name { get; set; } = "";
    String edited_mothers_name { get; set; } = "";
    String edited_head { get; set; } = "";
    int edited_num_of_fam { get; set; }
    String edited_ed_attain { get; set; } = "";
    int edited_household_number { get; set; }
    String edited_purok { get; set; } = "";
    String edited_status_type { get; set; } = "";
    string edited_illness_type { get; set; } = "";
    int edited_illness_typeID { get; set; }
    String edited_weight { get; set; } = "";
    String edited_height { get; set; } = "";
    String edited_temperature { get; set; } = "";
    String edited_bloodPressure { get; set; } = "";
    int edited_id_no = 0;

    List<ResidentMedicineModel> medicines = new List<ResidentMedicineModel>();
    int medicineId = 0;
    int quantity = 0;
    int none = 0;

    List<ResidentIllnesses> residentIllnesses = new List<ResidentIllnesses>();
    List<int> illnessesID = new List<int>();

    void ChangePurok(ChangeEventArgs args)
    {
        var selectedValue = Convert.ToString(args.Value);
        edited_purok = (selectedValue != null) ? selectedValue : "";
        Console.WriteLine($"Selected Purok: {purok}");
    }

    public void HandleChange(ChangeEventArgs e, int index)
    {
        Console.WriteLine(index);
        int selectedValue = Convert.ToInt32(e.Value);
        illnessesID[index] = selectedValue;
    }

    void AddInput()
    {
        illnessesID.Add(0);
    }

    public List<IllnessModel> Illnesses = new List<IllnessModel>();


    protected override void OnInitialized()
    {
        Console.WriteLine($"Fetching user Data and Health status data with the user ID of {ID}");
        ResidentModel resident = context.GetResident(ID);
        HouseholdModel household = context.GetHousehold(ID);
        ResidentHealthStatusModel RHS = context.GetResidentHealthStatus(ID);

        medicines = context.GetMedicines();

        residentIllnesses = context.GetIllnessesByID(ID);

        illnessesID.Clear();
        foreach (ResidentIllnesses illness in residentIllnesses)
        {
            int id = illness.GetIllnessID();
            if (!illnessesID.Contains(id))
            {
                illnessesID.Add(id);
                Console.WriteLine(id);
            }
        }
        illnessesID = illnessesID.Distinct().ToList();



        //Fill up the Resident Details
        firstName = resident.GetResidentFirstName();
        lastName = resident.GetResidentLastName();
        middleName = resident.GetResidentMiddleName();
        age = resident.GetResidentAge();
        dob = resident.GetResidentDOB();
        gender = resident.GetResidentGender();
        civil_status = resident.GetResidentCivilStatus();
        religion = resident.GetResidentReligion();
        occupation = resident.GetOccupation();
        ed_attain = resident.GetEducationalAttainment();
        household_number = resident.GetHouseholdNumber();
        purok = resident.GetPurok();
        id_no = resident.GetIDNum();
        // status_type = resident.GetResidentCivilStatus();

        //Fill up the Household Details
        fathers_name = household.GetFathersName();
        mothers_name = household.GetMothersName();
        head = household.GetHeadofFamily();
        num_of_fam = household.GetFamilyCount();

        //Fill up the RHS Details
        illness_type = context.GetIllnessNameByID(RHS.GetIllnessType());
        illness_typeID = RHS.GetIllnessType();
        weight = RHS.GetWeight();
        height = RHS.GetHeight();
        temperature = RHS.GetTemperature();
        bloodPressure = RHS.GetBloodPressure();

        //same for the edited parts
        //Fill up the Resident Details
        edited_firstName = resident.GetResidentFirstName();
        edited_lastName = resident.GetResidentLastName();
        edited_middleName = resident.GetResidentMiddleName();
        edited_age = resident.GetResidentAge();
        edited_dob = resident.GetResidentDOB();
        edited_gender = resident.GetResidentGender();
        edited_civil_status = resident.GetResidentCivilStatus();
        edited_religion = resident.GetResidentReligion();
        edited_occupation = resident.GetOccupation();
        edited_ed_attain = resident.GetEducationalAttainment();
        edited_household_number = resident.GetHouseholdNumber();
        edited_purok = resident.GetPurok();
        edited_id_no = resident.GetIDNum();
        // status_type = resident.GetResidentCivilStatus();

        //Fill up the Household Details
        edited_fathers_name = household.GetFathersName();
        edited_mothers_name = household.GetMothersName();
        edited_head = household.GetHeadofFamily();
        edited_num_of_fam = household.GetFamilyCount();

        //Fill up the RHS Details
        edited_illness_type = context.GetIllnessNameByID(RHS.GetIllnessType());
        edited_illness_typeID = RHS.GetIllnessType();
        edited_weight = RHS.GetWeight();
        edited_height = RHS.GetHeight();
        edited_temperature = RHS.GetTemperature();
        edited_bloodPressure = RHS.GetBloodPressure();


        Illnesses = context.GetIllnesses();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ResidentModel resident = context.GetResident(ID);
            HouseholdModel household = context.GetHousehold(ID);
            ResidentHealthStatusModel RHS = context.GetResidentHealthStatus(ID);

            medicines = context.GetMedicines();

            residentIllnesses = context.GetIllnessesByID(ID);
            illnessesID = illnessesID.Distinct().ToList();

            foreach (ResidentIllnesses illness in residentIllnesses)
            {
                int id = illness.GetIllnessID();
                if (!illnessesID.Contains(id))
                {
                    illnessesID.Add(id);
                    Console.WriteLine(id);
                }
            }
            illnessesID = illnessesID.Distinct().ToList();

            //Fill up the Resident Details
            firstName = resident.GetResidentFirstName();
            lastName = resident.GetResidentLastName();
            middleName = resident.GetResidentMiddleName();
            age = resident.GetResidentAge();
            dob = resident.GetResidentDOB();
            gender = resident.GetResidentGender();
            civil_status = resident.GetResidentCivilStatus();
            religion = resident.GetResidentReligion();
            occupation = resident.GetOccupation();
            ed_attain = resident.GetEducationalAttainment();
            household_number = resident.GetHouseholdNumber();
            purok = resident.GetPurok();
            // status_type = resident.GetResidentCivilStatus();

            //Fill up the Household Details
            fathers_name = household.GetFathersName();
            mothers_name = household.GetMothersName();
            head = household.GetHeadofFamily();
            num_of_fam = household.GetFamilyCount();

            //Fill up the RHS Details
            illness_type = context.GetIllnessNameByID(RHS.GetIllnessType());
            illness_typeID = RHS.GetIllnessType();
            weight = RHS.GetWeight();
            height = RHS.GetHeight();
            temperature = RHS.GetTemperature();
            bloodPressure = RHS.GetBloodPressure();

            //same for the edited parts
            //Fill up the Resident Details
            edited_firstName = resident.GetResidentFirstName();
            edited_lastName = resident.GetResidentLastName();
            edited_middleName = resident.GetResidentMiddleName();
            edited_age = resident.GetResidentAge();
            edited_dob = resident.GetResidentDOB();
            edited_gender = resident.GetResidentGender();
            edited_civil_status = resident.GetResidentCivilStatus();
            edited_religion = resident.GetResidentReligion();
            edited_occupation = resident.GetOccupation();
            edited_ed_attain = resident.GetEducationalAttainment();
            edited_household_number = resident.GetHouseholdNumber();
            edited_purok = resident.GetPurok();
            // status_type = resident.GetResidentCivilStatus();

            //Fill up the Household Details
            edited_fathers_name = household.GetFathersName();
            edited_mothers_name = household.GetMothersName();
            edited_head = household.GetHeadofFamily();
            edited_num_of_fam = household.GetFamilyCount();

            //Fill up the RHS Details
            edited_illness_type = context.GetIllnessNameByID(RHS.GetIllnessType());
            edited_illness_typeID = RHS.GetIllnessType();
            edited_weight = RHS.GetWeight();
            edited_height = RHS.GetHeight();
            edited_temperature = RHS.GetTemperature();
            edited_bloodPressure = RHS.GetBloodPressure();
            Illnesses = context.GetIllnesses();
            StateHasChanged();
        }
    }


    private void UpdateInformation()
    {
        ResidentModel residentModel = new ResidentModel();
        residentModel.FirstName = edited_firstName;
        residentModel.LastName = edited_lastName;
        residentModel.MiddleName = edited_middleName;
        residentModel.Age = edited_age;
        residentModel.Dob = edited_dob;
        residentModel.Gender = edited_gender;
        residentModel.Civil_status = edited_civil_status;
        residentModel.Religion = edited_religion;
        residentModel.Occupation = edited_occupation;
        residentModel.Ed_attain = edited_ed_attain;
        residentModel.Household_number = edited_household_number;
        residentModel.Purok = edited_purok;
        residentModel.IDNo = edited_id_no;

        illnessesID = illnessesID.Distinct().ToList();
        foreach(int illnessId in illnessesID)
        {
            if(illnessId != 0)
            {
                context.CreateResidentIllness(illnessId, ID);
            }
        }


        HouseholdModel householdModel = new HouseholdModel();
        householdModel.FathersName = edited_fathers_name;
        householdModel.MothersName = edited_mothers_name;
        householdModel.HeadofFamily = edited_head;
        householdModel.FamilyCount = edited_num_of_fam;

        ResidentHealthStatusModel rHSM = new ResidentHealthStatusModel();
        rHSM.TypeofillnessID = edited_illness_typeID;
        rHSM.Weight = edited_weight;
        rHSM.Height = edited_height;
        rHSM.Temperature = edited_temperature;
        rHSM.BloodPressure = edited_bloodPressure;

        context.UpdateResident(residentModel, ID);
        context.UpdateHousehold(householdModel, ID);
        context.UpdateResidentHealthStatus(rHSM, ID);
        StateHasChanged();
        NavigationManager.NavigateTo($"/bhw/resident/{ID}", forceLoad: true);

    }

    Modal MedicineForm = new Modal();

    private Task ShowMedicineModal()
    {
        return MedicineForm.Show();
    }

    private void HideMedicineModal()
    {

        MedicineForm.Hide();
    }

    private void AddMedicineReceipt()
    {
        MedicineReceiptModel newReceipt = new MedicineReceiptModel();

        newReceipt.residentId = ID;
        newReceipt.medicineId = medicineId;
        newReceipt.quantity = quantity;

        context.AddReceipt(newReceipt);

        medicineId = 0;
        quantity = 0;

        NavigationManager.NavigateTo("/bhw/medicine-record", forceLoad: true);
    }

    void GetMedicineID(ChangeEventArgs args)
    {
        var selectedValue = Convert.ToInt32(args.Value);
        medicineId = selectedValue;
    }
}