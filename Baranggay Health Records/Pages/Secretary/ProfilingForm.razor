@page "/secretary/profiling-form"
@using Baranggay_Health_Records.Controller
@layout SecretaryLayout
@inject Context context
@inject NavigationManager NavManager


<div class="container" style="margin-top: 32px;">
    <form @onsubmit="AddResident">
        <div class="row">
            <div class="col">
                <h1 class="text-center"><strong>Resident Form</strong></h1>
            </div>
        </div>
        <div class="row">
            <div class="col-xl-3"><label class="form-label">First Name</label><input @bind="firstName" class="form-control" type="text" placeholder="Ex. Smith" required></div>
            <div class="col-xl-4"><label class="form-label">Middle Name</label><input @bind="middleName" class="form-control" type="text" placeholder="Ex. Smith" required></div>
            <div class="col-xl-3"><label class="form-label">Last Name</label><input @bind="lastName" class="form-control" type="text" placeholder="Ex. Smith" required></div>
            <div class="col"><label class="form-label">Suffix</label><input @bind="suffix" class="form-control" type="text" placeholder="Ex. Smith" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-md-4 offset-md-0">
                <label class="form-label">Month</label>
                <div class="input-group">
                    <Select TValue="string" @bind-Value="dobMonth" @onchange="ChangeMonth" Class="form-control">
                        <SelectItem Value="String.Empty">Select Birth Month</SelectItem>
                        @foreach (var month in months)
                        {
                            <SelectItem Value="@month">@month</SelectItem>
                        }
                    </Select>
                </div>
            </div>
            <div class="col-xl-4 offset-xl-0">
                    <label class="form-label">Day</label>
                <div class="input-group">
                    <Select TValue="string" @bind-Value="dobDay" @onchange="ChangeDay" Class="form-control">
                        <SelectItem Value="String.Empty">Select Birth Day</SelectItem>
                        @foreach (var day in numbersString)
                        {
                            <SelectItem Value="@day">@day</SelectItem>
                        }
                    </Select>
                </div>
            </div>
            <div class="col-xl-4 offset-xl-0">
                    <label class="form-label">Year</label>
                <div class="input-group">
                    <Select TValue="string" @bind-Value="dobYear" @onchange="ChangeYear" Class="form-control">
                        <SelectItem Value="String.Empty">Select Birth Year</SelectItem>
                        @foreach (var year in years)
                        {
                            <SelectItem Value="@year">@year</SelectItem>
                        }
                    </Select>
                </div>
            </div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Age</label><input @bind="age" class="form-control" type="number" placeholder="age" required></div>
        </div>

        @if (age >= 60)
        {
            <div class="row" style="margin-top: 10px;">
                <div class="col-xl-12 offset-xl-0">
                    <label class="form-label">Senior Citizen ID No.</label>
                    <input @bind="id_no" class="form-control" type="number" placeholder="0000" required>
                </div>
            </div>
        }
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0">
                <label class="form-label">Age</label>
                <div class="form-check"><input class="form-check-input" type="radio" id="formCheck-1" name="gender" @onchange="@(() => gender = "Male")"><label class="form-check-label" for="formCheck-1">Male</label></div>
                <div class="form-check"><input class="form-check-input" type="radio" id="formCheck-2" name="gender" @onchange="@(() => gender = "Female")"><label class="form-check-label" for="formCheck-2">Female</label></div>
            </div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Civil Status</label><input @bind="civil_status" class="form-control" type="text" placeholder="Ex. Single" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Religion</label><input @bind="religion" class="form-control" type="text" placeholder="Ex. Catholic or Islam" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Occupation</label><input @bind="occupation" class="form-control" type="text" placeholder="Ex. Private Employee" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Father's Name</label><input @bind="fathers_name" class="form-control" type="text" placeholder="Ex. Smith" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Mother's Name</label><input @bind="mothers_name" class="form-control" type="text" placeholder="Ex. Smith" required /></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Head of Family</label><input @bind="head" class="form-control" type="text" placeholder="Ex. Smith" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0"><label class="form-label">Educational Attainment</label><input @bind="ed_attain" class="form-control" type="text" placeholder="Ex. College" required></div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0">
                <label class="form-label">Purok</label>
                <Select TValue="string" @bind-Value="@purok" Placeholder="Select Purok...." Class="form-control" @onchange="ChangePurok">
                    <SelectItem Value="String.Empty">Select Purok Where the Resident Currently Resides</SelectItem>
                    @foreach (string pur in purokList)
                    {
                        <SelectItem Value="@pur">@pur</SelectItem>
                    }
                </Select>
            </div>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-xl-12 offset-xl-0 d-flex flex-column justify-content-start">
                <label class="form-label">Illness Type</label>
                <div>
                    <button @onclick="AddInput" type="button" class="btn btn-success mb-3">Add Vice</button>
                </div>

                @for (int i = 0; i < statusID.Count; i++)
                {
                    int currentIndx = i;
                    <div class="input-group mb-3">
                        <Select TValue="int" Placeholder="Select Resident Vice...." Class="form-control mb-3" @onchange="e => ChangeStatus(e, currentIndx)">
                            <SelectItem Value="@none">None</SelectItem>
                            @foreach (Status dis_status in statuses)
                            {
                                <SelectItem Value="@dis_status.id">@dis_status.name</SelectItem>
                            }
                        </Select>
                    </div>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-success" style="margin-top: 20px;margin-bottom: 40px;margin-right: 22px;">ADD</button><a class="btn btn-danger" href="/secretary/" style="margin-top: 20px;margin-bottom: 40px;">Cancel</a>
    </form>
</div>

@code {
    string[] purokList = { "1A", "1B", "2", "3", "4", "5", "6", "7"};
    string firstName = "";
    string middleName = "";
    string lastName = "";
    string suffix = "";
    string dob = "";
    int age = 0;
    string gender = "";
    string civil_status = "";
    string religion = "";
    string occupation = "";
    string fathers_name = "";
    string mothers_name = "";
    string head = "";
    int num_of_fam = 0;
    string ed_attain = "";
    int household_number = 0;
    string purok = "";
    string status_type = "";
    int id_no = 0;
    int status = 0;
    int none = 0;

    string dobDay = "";
    string dobMonth = "";
    string dobYear = "";

    string[] months = {
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
    };

    // Array of strings from 1 to 30
    string[] numbersString = new string[30];
    string[] years = new string[44];

    List<Status> statuses = new List<Status>();
    List<int> statusID = new List<int> { 0 };

    public void ChangeStatus(ChangeEventArgs e, int index)
    {
        int selectedValue = Convert.ToInt32(e.Value);
        statusID[index] = selectedValue;
    }

    void AddInput()
    {
        statusID.Add(0);
    }

    void ChangeMonth(ChangeEventArgs args)
    {
        var selectedValue = Convert.ToString(args.Value);
        dobMonth = (selectedValue != null) ? selectedValue : "";
        Console.WriteLine($"Selected Month: {dobMonth}");
    }

    void ChangeDay(ChangeEventArgs args)
    {
        var selectedValue = Convert.ToString(args.Value);
        dobDay = (selectedValue != null) ? selectedValue : "";
        Console.WriteLine($"Selected Day: {dobDay}");
    }

    void ChangeYear(ChangeEventArgs args)
    {
        var selectedValue = Convert.ToString(args.Value);
        dobYear = (selectedValue != null) ? selectedValue : "";
        Console.WriteLine($"Selected Year: {dobYear}");
    }

    void ChangePurok(ChangeEventArgs args)
    {
        var selectedValue = Convert.ToString(args.Value);
        purok = (selectedValue != null) ? selectedValue : "";
        Console.WriteLine($"Selected Purok: {purok}");
    }

    protected override void OnInitialized()
    {
        for (int i = 0; i < 30; i++)
        {
            numbersString[i] = (i + 1).ToString();
        }

        for (int i = 0; i < 44; i++)
        {
            years[i] = (1980 + i).ToString();
        }

        statuses = context.GetAllStatuses();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            for (int i = 0; i < 30; i++)
            {
                numbersString[i] = (i + 1).ToString();
            }

            for (int i = 0; i < 44; i++)
            {
                years[i] = (1980 + i).ToString();
            }
            statuses = context.GetAllStatuses();
        }
    }


    void AddResident()
    {
        ResidentModel res = new ResidentModel();
        HouseholdModel household = new HouseholdModel();
        ResidentHealthStatusModel rhs = new ResidentHealthStatusModel();

        res.FirstName = firstName;
        res.MiddleName = middleName;
        res.LastName = lastName;
        res.Suffix = suffix;
        res.Dob = $"{dobMonth}/{dobDay}/{dobYear}";
        res.Age = age;
        res.Gender = gender;
        res.Civil_status = civil_status;
        res.Religion = religion;
        res.Occupation = occupation;
        res.Ed_attain = ed_attain;
        res.Household_number = household_number;
        res.Purok = purok;
        res.IDNo = id_no;
        res.statusId = status;




        if(
            firstName != "" ||
            middleName != "" ||
            lastName != "" ||
            suffix != "" ||
            age != 0 ||
            gender != "" ||
            civil_status != "" ||
            religion != "" ||
            occupation != "" ||
            fathers_name != "" ||
            mothers_name != "" ||
            head != "" ||
            num_of_fam != 0 ||
            ed_attain != "" ||
            household_number != 0 ||
            purok != "" ||
            status_type != ""
        )
        {
            int id = context.CreateResident(res);
            household.HeadofFamily = head;
            household.MemberID = id;
            household.FathersName = fathers_name;
            household.MothersName = mothers_name;
            household.Member = firstName + middleName + lastName;
            household.FamilyCount = num_of_fam;

            statusID = statusID.Distinct().ToList();

            HashSet<int> unStatus = new HashSet<int>();

            foreach (var statID in statusID)
            {
                if (statID != 0 && !unStatus.Contains(statID))
                {
                    context.CreateResidentStatus(statID, id);
                    unStatus.Add(statID);
                }
            }

            rhs.ResidentId = id;
            context.CreateHousehold(household);
            context.CreateResidentHealthStatus(rhs);

        }

        firstName = "";
        middleName = "";
        lastName = "";
        suffix = "";
        age = 0;
        gender = "";
        civil_status = "";
        religion = "";
        occupation = "";
        fathers_name = "";
        mothers_name = "";
        head = "";
        num_of_fam = 0;
        ed_attain = "";
        household_number = 0;
        purok = "";
        status_type = "";
        head = "";
        fathers_name = "";
        mothers_name = "";
        num_of_fam = 0;
        dobDay = "";
        dobMonth = "";
        dobYear = "";

        Console.WriteLine(context.GetAllResidents());
        Console.WriteLine("Item Added to Residents!");

    }
}